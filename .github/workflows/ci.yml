# Copyright (c) 2016-2020 Martin Donath <martin.donath@squidfunk.com>

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

name: ci
on:
  - push
  - pull_request

# Environment
env:
  CI: true
  NODE_VERSION: 10.x
  PYTHON_VERSION: 3.x

# Jobs to run
jobs:

  # Build theme
  build:
    runs-on: ubuntu-latest
    steps:

      # Checkout source form GitHub
      - uses: actions/checkout@v2

      # Install Node runtime and dependencies
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v1
        id: cache-node
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm install

      # Run linter
      - run: npm run lint

      # Build distribution files
      - run: npm run build

      # Check diff after build
      - run: git diff --name-only


  # Publish Python package and Docker image
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Checkout source form GitHub
      - uses: actions/checkout@v2

      # Install Node runtime and dependencies
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: actions/cache@v1
        id: cache-node
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - if: steps.cache-node.outputs.cache-hit != 'true'
        run: npm install

      # Build distribution files
      - run: npm run build

      # Install Python runtime and dependencies
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: pip install --upgrade setuptools wheel twine

      # Build Python package
      - run: python setup.py build sdist bdist_wheel --universal

      # Push package to PyPI
      - env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload -u ${PYPI_USERNAME} -p ${PYPI_PASSWORD} dist/*
